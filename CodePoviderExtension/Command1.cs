using System.Diagnostics;
using System.Text;
using Microsoft;
using Microsoft.VisualStudio.Extensibility;
using Microsoft.VisualStudio.Extensibility.Commands;
using Microsoft.VisualStudio.Extensibility.Shell;
using Microsoft.VisualStudio.Extensibility.Editor;

namespace CodeProviderExtension
{
    /// <summary>
    /// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
    /// </summary>
    [VisualStudioContribution]
    internal class Command1 : Command
    {
        private readonly TraceSource logger;
        private readonly ICodeAnalysisService codeAnalysisService;

        public Command1(TraceSource traceSource, ICodeAnalysisService codeAnalysisService)
        {
            this.logger = Requires.NotNull(traceSource, nameof(traceSource));
            this.codeAnalysisService = Requires.NotNull(codeAnalysisService, nameof(codeAnalysisService));
        }

        public override CommandConfiguration CommandConfiguration => new("%CodeProviderExtension.Command1.DisplayName%")
        {
            Icon = new(ImageMoniker.KnownValues.DocumentOutline, IconSettings.IconAndText),
            Placements = [CommandPlacement.KnownPlacements.ExtensionsMenu],
        };

        public override async Task ExecuteCommandAsync(IClientContext context, CancellationToken cancellationToken)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                var activeTextView = await this.Extensibility.Editor().GetActiveTextViewAsync(context, cancellationToken);
                
                if (activeTextView == null)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è!", 
                        PromptOptions.OK, 
                        cancellationToken);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                var documentUri = activeTextView.Document.Uri;
                var fileName = System.IO.Path.GetFileName(documentUri.LocalPath);
                var fileExtension = System.IO.Path.GetExtension(fileName).TrimStart('.');

                // –ü–æ–ª—É—á–∞–µ–º —Å–µ–ª–µ–∫—Ü–∏—é
                var selection = activeTextView.Selection;
                
                string documentText;
                string analysisType;
                
                if (!selection.IsEmpty)
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    documentText = selection.Extent.ToString() ?? "";
                    analysisType = "–≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞";
                }
                else
                {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–í—ã–¥–µ–ª–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤—ã–¥–µ–ª–∏—Ç–µ –≤–µ—Å—å —Ñ–∞–π–ª (Ctrl+A)!", 
                        PromptOptions.OK, 
                        cancellationToken);
                    return;
                }

                if (string.IsNullOrWhiteSpace(documentText))
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç!", 
                        PromptOptions.OK, 
                        cancellationToken);
                    return;
                }

                this.logger.TraceInformation($"–ê–Ω–∞–ª–∏–∑ {analysisType}: {documentText.Length} —Å–∏–º–≤–æ–ª–æ–≤");

                // –í—ã–ø–æ–ª–Ω—è–µ–º –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                var analysisResult = await this.codeAnalysisService.AnalyzeCodeAsync(
                    documentText, 
                    fileExtension, 
                    cancellationToken);

                // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
                var report = BuildQuickReport(fileName, documentText, analysisResult);

                await this.Extensibility.Shell().ShowPromptAsync(
                    report, 
                    PromptOptions.OK, 
                    cancellationToken);
            }
            catch (Exception ex)
            {
                this.logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}");
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"–û—à–∏–±–∫–∞: {ex.Message}", 
                    PromptOptions.OK, 
                    cancellationToken);
            }
        }

        private string BuildQuickReport(string fileName, string documentText, CodeAnalysisResult analysisResult)
        {
            var report = new StringBuilder();
            
            report.AppendLine($"üìÑ –î–û–ö–£–ú–ï–ù–¢: {fileName}");
            report.AppendLine(new string('‚îÄ', 40));
            report.AppendLine();
            
            // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            report.AppendLine("üìä –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:");
            report.AppendLine($"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {documentText.Length:N0} —Å–∏–º–≤–æ–ª–æ–≤");
            report.AppendLine($"   ‚Ä¢ –°—Ç—Ä–æ–∫: {analysisResult.LineCount:N0}");
            report.AppendLine($"   ‚Ä¢ –Ø–∑—ã–∫: {analysisResult.Language}");
            report.AppendLine();

            // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞
            if (analysisResult.Classes.Any() || analysisResult.Methods.Any())
            {
                report.AppendLine("üèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –ö–û–î–ê:");
                
                if (analysisResult.Classes.Any())
                {
                    report.AppendLine($"   ‚Ä¢ –ö–ª–∞—Å—Å–æ–≤: {analysisResult.Classes.Count()}");
                    if (analysisResult.Classes.Count() <= 3)
                    {
                        foreach (var className in analysisResult.Classes)
                        {
                            report.AppendLine($"     - {className}");
                        }
                    }
                }
                
                if (analysisResult.Methods.Any())
                {
                    report.AppendLine($"   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤: {analysisResult.Methods.Count()}");
                }
                
                report.AppendLine();
            }

            // –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
            var qualityIndicator = analysisResult.ComplexityScore switch
            {
                <= 2.0 => "üü¢ –ü—Ä–æ—Å—Ç–æ–π",
                <= 4.0 => "üü° –£–º–µ—Ä–µ–Ω–Ω—ã–π",
                <= 6.0 => "üü† –°–ª–æ–∂–Ω—ã–π",
                _ => "üî¥ –û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π"
            };
            
            report.AppendLine("üéØ –û–¶–ï–ù–ö–ê –°–õ–û–ñ–ù–û–°–¢–ò:");
            report.AppendLine($"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {qualityIndicator} ({analysisResult.ComplexityScore:F1}/10)");
            
            // –ü—Ä–æ–±–ª–µ–º—ã (–∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä)
            if (analysisResult.Issues.Any())
            {
                var criticalCount = analysisResult.Issues.Count(i => i.Severity == IssueSeverity.Critical);
                var errorCount = analysisResult.Issues.Count(i => i.Severity == IssueSeverity.Error);
                var warningCount = analysisResult.Issues.Count(i => i.Severity == IssueSeverity.Warning);
                
                report.AppendLine($"   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {analysisResult.Issues.Count()}");
                
                if (criticalCount > 0) report.AppendLine($"     üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {criticalCount}");
                if (errorCount > 0) report.AppendLine($"     üü† –û—à–∏–±–æ–∫: {errorCount}");
                if (warningCount > 0) report.AppendLine($"     üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warningCount}");
            }
            else
            {
                report.AppendLine("   ‚Ä¢ ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
            }
            
            report.AppendLine();

            // –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            report.AppendLine("üìñ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†:");
            var lines = documentText.Split('\n');
            var previewLines = lines.Take(5);
            
            foreach (var line in previewLines)
            {
                var trimmedLine = line.Length > 60 ? line.Substring(0, 57) + "..." : line;
                report.AppendLine($"   {trimmedLine}");
            }
            
            if (lines.Length > 5)
            {
                report.AppendLine($"   ... (–µ—â–µ {lines.Length - 5} —Å—Ç—Ä–æ–∫)");
            }

            report.AppendLine();
            report.AppendLine("üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞");

            return report.ToString();
        }
    }
}
