using System.Diagnostics;
using System.Net.Http;
using System.Text;
using Microsoft;
using Microsoft.VisualStudio.Extensibility;
using Microsoft.VisualStudio.Extensibility.Commands;
using Microsoft.VisualStudio.Extensibility.Shell;

namespace CodeProviderExtension
{
    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.
    /// </summary>
    [VisualStudioContribution]
    internal class AnalyzeCodeCommand : Command
    {
        private readonly TraceSource logger;

        public override CommandConfiguration CommandConfiguration
        {
            get
            {
                return new("%CodeProviderExtension.AnalyzeCode.DisplayName%")
                {
                    
                    TooltipText = "%CodeProviderExtension.AnalyzeCode.TooltipText%",
                    Icon = null, // –£–∫–∞–∂–∏—Ç–µ –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    EnabledWhen = null, // –£–∫–∞–∂–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    VisibleWhen = null // –£–∫–∞–∂–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                };
            }
        }

        public AnalyzeCodeCommand(VisualStudioExtensibility extensibility) : base(extensibility)
        {
            this.logger = new TraceSource("AnalyzeCodeCommand");
        }

        //public override CommandConfiguration CommandConfiguration => new("%CodeProviderExtension.AnalyzeCode.DisplayName%")
        //{
        //    Icon = new(ImageMoniker.KnownValues, IconSettings.IconAndText),
        //    Placements = [CommandPlacement.KnownPlacements.ExtensionsMenu],
        //};

        public override async Task ExecuteCommandAsync(IClientContext context, CancellationToken cancellationToken)
        {
            try
            {
                this.logger.TraceInformation("–ù–∞—á–∞–ª–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞");

                // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å-–ª–æ–∫–∞—Ç–æ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
                var codeAnalysisService = new CodeAnalysisService(new HttpClient());

                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                var activeTextView = await this.Extensibility.Editor().GetActiveTextViewAsync(context, cancellationToken);
                
                if (activeTextView == null)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!", 
                        PromptOptions.OK, 
                        cancellationToken);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                var selection = activeTextView.Selection;
                if (selection.IsEmpty)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–í—ã–¥–µ–ª–∏—Ç–µ –∫–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!",
                        PromptOptions.OK,
                        cancellationToken);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                var documentUri = activeTextView.Document.Uri;
                var fileName = System.IO.Path.GetFileName(documentUri.LocalPath);
                var fileExtension = System.IO.Path.GetExtension(fileName).TrimStart('.');

                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–¥
                var selectedCode = selection.Extent.ToString() ?? "";
                this.logger.TraceInformation($"–ê–Ω–∞–ª–∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞: {selectedCode.Length} —Å–∏–º–≤–æ–ª–æ–≤");

                if (string.IsNullOrWhiteSpace(selectedCode))
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç!", 
                        PromptOptions.OK, 
                        cancellationToken);
                    return;
                }

                // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
                var analysisResult = await codeAnalysisService.AnalyzeCodeAsync(
                    selectedCode, 
                    fileExtension, 
                    cancellationToken);

                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                var suggestions = await codeAnalysisService.GetSuggestionsAsync(
                    selectedCode, 
                    fileExtension, 
                    cancellationToken);

                // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                var report = BuildDetailedReport(fileName, selectedCode, analysisResult, suggestions);

                await this.Extensibility.Shell().ShowPromptAsync(
                    report, 
                    PromptOptions.OK, 
                    cancellationToken);
            }
            catch (Exception ex)
            {
                this.logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {ex.Message}");
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {ex.Message}", 
                    PromptOptions.OK, 
                    cancellationToken);
            }
        }

        private static string BuildDetailedReport(string fileName, string code, CodeAnalysisResult analysisResult, IEnumerable<CodeSuggestion> suggestions)
        {
            var report = new StringBuilder();
            
            report.AppendLine($"üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–î–ê");
            report.AppendLine($"üìÑ –§–∞–π–ª: {fileName}");
            report.AppendLine(new string('‚ïê', 50));
            report.AppendLine();
            
            // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            report.AppendLine("üìä –ú–ï–¢–†–ò–ö–ò –ö–û–î–ê:");
            report.AppendLine($"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {code.Length:N0} —Å–∏–º–≤–æ–ª–æ–≤");
            report.AppendLine($"   ‚Ä¢ –°—Ç—Ä–æ–∫: {analysisResult.LineCount:N0}");
            report.AppendLine($"   ‚Ä¢ –Ø–∑—ã–∫: {analysisResult.Language}");
            report.AppendLine($"   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysisResult.ComplexityScore:F1}/10");
            report.AppendLine();

            // –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if (analysisResult.Classes.Any() || analysisResult.Methods.Any())
            {
                report.AppendLine("üèóÔ∏è –°–¢–†–£–ö–¢–£–†–ù–´–ô –ê–ù–ê–õ–ò–ó:");
                
                if (analysisResult.Classes.Any())
                {
                    report.AppendLine($"   üì¶ –ö–ª–∞—Å—Å—ã ({analysisResult.Classes.Count()}):");
                    foreach (var className in analysisResult.Classes.Take(10))
                    {
                        report.AppendLine($"      - {className}");
                    }
                    if (analysisResult.Classes.Count() > 10)
                    {
                        report.AppendLine($"      ... –∏ –µ—â–µ {analysisResult.Classes.Count() - 10}");
                    }
                    report.AppendLine();
                }
                
                if (analysisResult.Methods.Any())
                {
                    report.AppendLine($"   üîß –ú–µ—Ç–æ–¥—ã ({analysisResult.Methods.Count()}):");
                    foreach (var methodName in analysisResult.Methods.Take(10))
                    {
                        report.AppendLine($"      - {methodName}");
                    }
                    if (analysisResult.Methods.Count() > 10)
                    {
                        report.AppendLine($"      ... –∏ –µ—â–µ {analysisResult.Methods.Count() - 10}");
                    }
                    report.AppendLine();
                }
            }

            // –ü—Ä–æ–±–ª–µ–º—ã
            if (analysisResult.Issues.Any())
            {
                report.AppendLine("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:");
                
                var groupedIssues = analysisResult.Issues.GroupBy(i => i.Severity);
                foreach (var group in groupedIssues.OrderByDescending(g => g.Key))
                {
                    var icon = group.Key switch
                    {
                        IssueSeverity.Critical => "üî¥",
                        IssueSeverity.Error => "üü†",
                        IssueSeverity.Warning => "üü°",
                        IssueSeverity.Info => "üîµ",
                        _ => "‚ö™"
                    };
                    
                    report.AppendLine($"   {icon} {group.Key} ({group.Count()}):");
                    foreach (var issue in group.Take(5))
                    {
                        if (issue.Line > 0)
                        {
                            report.AppendLine($"        –°—Ç—Ä–æ–∫–∞: {issue.Line}");
                        }
                    }
                    if (group.Count() > 5)
                    {
                        report.AppendLine($"      ... –∏ –µ—â–µ {group.Count() - 5}");
                    }
                    report.AppendLine();
                }
            }
            else
            {
                report.AppendLine("‚úÖ –ü–†–û–ë–õ–ï–ú–´ –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–´");
                report.AppendLine();
            }

            // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            if (suggestions.Any())
            {
                report.AppendLine("üí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:");
                foreach (var suggestion in suggestions.Take(5))
                {
           
                    
                    report.AppendLine($"      {suggestion.Description}");
                    report.AppendLine();
                }
                
                if (suggestions.Count() > 5)
                {
                    report.AppendLine($"   ... –∏ –µ—â–µ {suggestions.Count() - 5} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π");
                    report.AppendLine();
                }
            }

            report.AppendLine("üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞");

            return report.ToString();
        }
    }
}
