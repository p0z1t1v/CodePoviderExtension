using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.VisualStudio.Extensibility;
using Microsoft.VisualStudio.Extensibility.Commands;
using Microsoft.VisualStudio.Extensibility.Shell;
using CodePoviderExtension.MCP;

namespace CodeProviderExtension
{
    /// <summary>
    /// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    /// </summary>
    [VisualStudioContribution]
    internal class McpTestCommand : Command
    {
        private readonly TraceSource logger;
        private readonly IMcpClient mcpClient;

        public McpTestCommand(
            VisualStudioExtensibility extensibility,
            TraceSource traceSource,
            IMcpClient mcpClient) : base(extensibility)
        {
            this.logger = traceSource ?? throw new ArgumentNullException(nameof(traceSource));
            this.mcpClient = mcpClient ?? throw new ArgumentNullException(nameof(mcpClient));
        }

        public override CommandConfiguration CommandConfiguration => new("üß† –¢–µ—Å—Ç MCP")
        {
            TooltipText = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É",
            Placements = [CommandPlacement.KnownPlacements.ExtensionsMenu]
        };

        public override async Task ExecuteCommandAsync(IClientContext context, CancellationToken ct)
        {
            try
            {
                logger.TraceInformation("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");

                // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if (!mcpClient.IsConnected)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP...", 
                        PromptOptions.OK, ct);
                    
                    try
                    {
                        await mcpClient.InitializeAsync(ct);
                    }
                    catch (Exception initEx)
                    {
                        await this.Extensibility.Shell().ShowPromptAsync(
                            $"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP: {initEx.Message}\n\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ my-memory —Å–µ—Ä–≤–µ—Ä:\nnpx @modelcontextprotocol/server-memory", 
                            PromptOptions.OK, ct);
                        return;
                    }
                }

                if (mcpClient.IsConnected)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "‚úÖ MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n\nmy-memory —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω.", 
                        PromptOptions.OK, ct);
                }
                else
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP\n\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ my-memory —Å–µ—Ä–≤–µ—Ä:\nnpx @modelcontextprotocol/server-memory", 
                        PromptOptions.OK, ct);
                }
            }
            catch (Exception ex)
            {
                logger.TraceInformation($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ MCP: {ex.Message}");
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"–û—à–∏–±–∫–∞ MCP: {ex.Message}", 
                    PromptOptions.OK, ct);
            }
        }
    }
}
