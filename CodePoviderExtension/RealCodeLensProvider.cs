using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using Microsoft.VisualStudio.Extensibility;
using Microsoft.VisualStudio.Extensibility.Editor;
using Microsoft.VisualStudio.Text;
using System.ComponentModel.Composition;
using System.Diagnostics;
using System.IO;

namespace CodeProviderExtension
{
    /// <summary>
    /// –£–ª—É—á—à–µ–Ω–Ω—ã–π CodeLens Provider –¥–ª—è Visual Studio Extensibility API.
    /// </summary>
    [VisualStudioContribution]
    internal class EnhancedCodeLensProvider : ExtensionPart, ITextViewOpenClosedListener, ITextViewChangedListener
    {
        private readonly SimpleCodeLensAnalyzer analyzer;
        private readonly Dictionary<string, List<CodeLensData>> cache;
        private readonly TraceSource logger;
        private readonly Timer refreshTimer;

        public TextViewExtensionConfiguration TextViewExtensionConfiguration => new()
        {
            AppliesTo = [
                DocumentFilter.FromDocumentType("CSharp"),
                DocumentFilter.FromDocumentType("Basic"),
                DocumentFilter.FromDocumentType("C/C++")
            ],
        };

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ CodeLens.
        /// </summary>
        public EnhancedCodeLensProvider(ExtensionCore extensionCore, VisualStudioExtensibility extensibility, SimpleCodeLensAnalyzer analyzer) 
            : base(extensionCore, extensibility)
        {
            this.analyzer = analyzer;
            this.cache = new Dictionary<string, List<CodeLensData>>();
            this.logger = new TraceSource("EnhancedCodeLensProvider");
            
            // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.refreshTimer = new Timer(RefreshAllCodeLens, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
        }        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
        /// </summary>
        public Task TextViewOpenedAsync(ITextViewSnapshot textView, CancellationToken cancellationToken)
        {
            try
            {
                logger.TraceInformation($"–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: {GetDocumentPath(textView)}");
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                _ = Task.Run(async () =>
                {
                    await Task.Delay(500, cancellationToken); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
                    await AnalyzeAndDisplayCodeLensAsync(textView, cancellationToken);
                }, cancellationToken);
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {ex.Message}");
            }
            
            return Task.CompletedTask;
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
        /// </summary>
        public async Task TextViewClosedAsync(ITextViewSnapshot textView, CancellationToken cancellationToken)
        {
            try
            {
                var documentPath = GetDocumentPath(textView);
                cache.Remove(documentPath);
                logger.TraceInformation($"–ó–∞–∫—Ä—ã—Ç —Ñ–∞–π–ª: {documentPath}");
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {ex.Message}");
            }
            
            await Task.CompletedTask;
        }        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
        /// </summary>
        public Task TextViewChangedAsync(TextViewChangedArgs args, CancellationToken cancellationToken)
        {
            try
            {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                _ = Task.Run(async () =>
                {
                    await Task.Delay(2000, cancellationToken); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    await AnalyzeAndDisplayCodeLensAsync(args.AfterTextView, cancellationToken);
                }, cancellationToken);
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {ex.Message}");
            }
            
            return Task.CompletedTask;
        }        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç CodeLens –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        /// </summary>
        private async Task AnalyzeAndDisplayCodeLensAsync(ITextViewSnapshot textView, CancellationToken cancellationToken)
        {
            try
            {
                if (!ToggleCodeLensCommand.IsCodeLensEnabled)
                    return;

                var document = textView.Document;
                if (document == null) return;                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                var sourceCode = string.Empty;
                try 
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                    sourceCode = document.Text.ToString();
                }
                catch (Exception ex)
                {
                    logger.TraceEvent(TraceEventType.Warning, 0, $"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}");
                    return;
                }

                var documentPath = GetDocumentPath(textView);

                if (string.IsNullOrEmpty(sourceCode) || !IsSupportedFile(documentPath))
                    return;

                logger.TraceInformation($"–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –¥–ª—è: {documentPath}");

                // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                var codeLensInfos = analyzer.AnalyzeCode(sourceCode, documentPath);
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
                var codeLensData = codeLensInfos
                    .Where(info => ShouldShowCodeLens(info))
                    .Select(info => CreateCodeLensData(info, textView))
                    .Where(data => data != null)
                    .Cast<CodeLensData>() // –£–±–∏—Ä–∞–µ–º null –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    .ToList();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                cache[documentPath] = codeLensData;

                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –≤—ã—Ö–æ–¥–Ω–æ–º –æ–∫–Ω–µ Visual Studio
                await DisplayCodeLensInOutputAsync(codeLensData, documentPath);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–µ
                await ShowCodeLensInStatusBarAsync(codeLensData.Count, documentPath);

                logger.TraceInformation($"–°–æ–∑–¥–∞–Ω–æ {codeLensData.Count} CodeLens —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è {documentPath}");
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {ex.Message}");
            }
        }        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ CodeLens.
        /// </summary>
        private CodeLensData? CreateCodeLensData(SimpleCodeLensInfo info, ITextViewSnapshot textView)
        {
            try
            {
                // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Ä–∞–∑—É–º–Ω—ã–π
                if (info.Line < 0)
                    return null;

                var settings = CodeLensSettings.Instance;

                return new CodeLensData
                {
                    Line = info.Line,
                    ElementName = info.ElementName,
                    Type = info.Type,
                    DisplayText = GenerateDisplayText(info, settings),
                    DetailedInfo = GenerateDetailedInfo(info),
                    Priority = info.Priority,
                    HasWarnings = info.Suggestions.Any(),
                    Suggestions = info.Suggestions,
                    Metrics = new CodeMetrics
                    {
                        CyclomaticComplexity = info.CyclomaticComplexity,
                        LinesOfCode = info.LinesOfCode,
                        ParameterCount = info.ParameterCount,
                        MethodCount = info.MethodCount,
                        PropertyCount = info.PropertyCount,
                        FieldCount = info.FieldCount
                    }
                };
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CodeLens –¥–∞–Ω–Ω—ã—Ö: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        /// </summary>
        private string GenerateDisplayText(SimpleCodeLensInfo info, CodeLensSettings settings)
        {
            var parts = new List<string>();

            if (info.Type == CodeLensType.Method)
            {
                if (settings.ShowComplexity && info.CyclomaticComplexity > 1)
                {
                    var complexityIcon = info.CyclomaticComplexity > settings.ComplexityWarningThreshold ? "üî¥" : "üü¢";
                    parts.Add($"{complexityIcon} –°–ª–æ–∂–Ω–æ—Å—Ç—å: {info.CyclomaticComplexity}");
                }
                
                if (settings.ShowLinesOfCode && info.LinesOfCode > 0)
                {
                    var linesIcon = info.LinesOfCode > settings.MaxMethodLines ? "‚ö†Ô∏è" : "üìè";
                    parts.Add($"{linesIcon} –°—Ç—Ä–æ–∫: {info.LinesOfCode}");
                }
                
                if (settings.ShowParameterCount && info.ParameterCount > 0)
                {
                    var paramsIcon = info.ParameterCount > 5 ? "‚ö†Ô∏è" : "üìã";
                    parts.Add($"{paramsIcon} –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {info.ParameterCount}");
                }
            }
            else if (info.Type == CodeLensType.Class && settings.ShowClassInfo)
            {
                parts.Add($"üèóÔ∏è –ú–µ—Ç–æ–¥–æ–≤: {info.MethodCount}");
                if (info.PropertyCount > 0)
                    parts.Add($"‚öôÔ∏è –°–≤–æ–π—Å—Ç–≤: {info.PropertyCount}");
                if (info.FieldCount > 0)
                    parts.Add($"üì¶ –ü–æ–ª–µ–π: {info.FieldCount}");
            }

            if (settings.ShowAISuggestions && info.Suggestions.Any())
            {
                parts.Add($"üí° {info.Suggestions.Count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π");
            }

            return parts.Any() ? string.Join(" | ", parts) : $"üìä {info.ElementName}";
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        /// </summary>
        private string GenerateDetailedInfo(SimpleCodeLensInfo info)
        {
            var details = new List<string>
            {
                $"=== {info.ElementName} ({GetTypeDisplayName(info.Type)}) ==="
            };

            if (info.Type == CodeLensType.Method)
            {
                details.Add($"üìä –ú–µ—Ç—Ä–∏–∫–∏:");
                details.Add($"  ‚Ä¢ –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {info.CyclomaticComplexity}");
                details.Add($"  ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {info.LinesOfCode}");
                details.Add($"  ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {info.ParameterCount}");
                
                if (info.CyclomaticComplexity > 10)
                    details.Add($"  üî¥ –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥.");
                if (info.LinesOfCode > 50)
                    details.Add($"  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –º–µ—Ç–æ–¥!");
            }
            else if (info.Type == CodeLensType.Class)
            {
                details.Add($"üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞—Å—Å–∞:");
                details.Add($"  ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤: {info.MethodCount}");
                details.Add($"  ‚Ä¢ –°–≤–æ–π—Å—Ç–≤: {info.PropertyCount}");
                details.Add($"  ‚Ä¢ –ü–æ–ª–µ–π: {info.FieldCount}");
            }

            if (info.Suggestions.Any())
            {
                details.Add($"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:");
                details.AddRange(info.Suggestions.Select(s => $"  ‚Ä¢ {s}"));
            }

            return string.Join(Environment.NewLine, details);
        }

        /// <summary>
        /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç CodeLens –≤ –≤—ã—Ö–æ–¥–Ω–æ–º –æ–∫–Ω–µ.
        /// </summary>
        private async Task DisplayCodeLensInOutputAsync(List<CodeLensData> codeLensData, string documentPath)
        {
            try
            {
                if (!codeLensData.Any()) return;

                var output = new List<string>
                {
                    $"",
                    $"üéØ –ê–ù–ê–õ–ò–ó –ö–û–î–ê: {Path.GetFileName(documentPath)}",
                    $"{'='*60}",
                    $"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {DateTime.Now:HH:mm:ss}",
                    $"üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {codeLensData.Count}",
                    $""
                };

                foreach (var data in codeLensData.OrderBy(d => d.Line))
                {
                    output.Add($"üìç –°—Ç—Ä–æ–∫–∞ {data.Line + 1}: {data.DisplayText}");
                    
                    if (data.HasWarnings)
                    {
                        output.Add($"   ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {string.Join(", ", data.Suggestions)}");
                    }
                }

                output.Add($"{'='*60}");

                // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –≤ Debug –∫–æ–Ω—Å–æ–ª—å
                foreach (var line in output)
                {
                    Debug.WriteLine(line);
                }

                // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑–∞—Ç—å –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–µ
                await Task.CompletedTask;
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ CodeLens: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–µ.
        /// </summary>
        private async Task ShowCodeLensInStatusBarAsync(int count, string documentPath)
        {
            try
            {
                var fileName = Path.GetFileName(documentPath);
                var message = $"üìä CodeLens: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ {fileName}";
                
                // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–æ–º VS
                Debug.WriteLine($"[StatusBar] {message}");
                
                await Task.CompletedTask;
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å CodeLens –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞.
        /// </summary>
        private bool ShouldShowCodeLens(SimpleCodeLensInfo info)
        {
            var settings = CodeLensSettings.Instance;
            
            if (info.Type == CodeLensType.Method)
            {
                return settings.ShowComplexity || settings.ShowLinesOfCode || settings.ShowParameterCount;
            }
            else if (info.Type == CodeLensType.Class)
            {
                return settings.ShowClassInfo;
            }

            return true;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª.
        /// </summary>
        private bool IsSupportedFile(string filePath)
        {
            var extension = Path.GetExtension(filePath).ToLowerInvariant();
            return extension == ".cs" || extension == ".vb" || extension == ".cpp" || extension == ".c" || extension == ".h";
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É.
        /// </summary>
        private string GetDocumentPath(ITextViewSnapshot textView)
        {
            return textView.Document?.Uri?.LocalPath ?? "Unknown";
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ç–∏–ø–∞.
        /// </summary>
        private string GetTypeDisplayName(CodeLensType type)
        {
            return type switch
            {
                CodeLensType.Method => "–ú–µ—Ç–æ–¥",
                CodeLensType.Class => "–ö–ª–∞—Å—Å",
                CodeLensType.Property => "–°–≤–æ–π—Å—Ç–≤–æ",
                CodeLensType.Field => "–ü–æ–ª–µ",
                CodeLensType.Interface => "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
                _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            };
        }

        /// <summary>
        /// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö CodeLens.
        /// </summary>
        private void RefreshAllCodeLens(object? state)
        {
            try
            {
                if (cache.Any())
                {
                    logger.TraceInformation($"–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CodeLens –¥–ª—è {cache.Count} —Ñ–∞–π–ª–æ–≤");
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                }
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                refreshTimer?.Dispose();
                cache.Clear();
            }
            base.Dispose(disposing);
        }
    }

    /// <summary>
    /// –î–∞–Ω–Ω—ã–µ CodeLens –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    /// </summary>
    public class CodeLensData
    {
        public int Line { get; set; }
        public string ElementName { get; set; } = string.Empty;
        public CodeLensType Type { get; set; }
        public string DisplayText { get; set; } = string.Empty;
        public string DetailedInfo { get; set; } = string.Empty;
        public int Priority { get; set; }
        public bool HasWarnings { get; set; }
        public List<string> Suggestions { get; set; } = new();
        public CodeMetrics Metrics { get; set; } = new();
    }

    /// <summary>
    /// –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–¥–∞.
    /// </summary>
    public class CodeMetrics
    {
        public int CyclomaticComplexity { get; set; }
        public int LinesOfCode { get; set; }
        public int ParameterCount { get; set; }
        public int MethodCount { get; set; }
        public int PropertyCount { get; set; }
        public int FieldCount { get; set; }
    }
}
