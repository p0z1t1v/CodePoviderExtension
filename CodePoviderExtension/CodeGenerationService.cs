using System.Text.Json;
using System.Text;
using System.Net.Http;
using Microsoft.Extensions.Logging;
using CodePoviderExtension.MCP;

namespace CodeProviderExtension
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
    /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OpenAI API, Claude API –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏.
    /// –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å MCP –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    /// </summary>
    internal class CodeGenerationService : ICodeGenerationService
    {
        private readonly HttpClient httpClient;
        private readonly ICodeAnalysisService codeAnalysisService;
        private readonly ILogger<CodeGenerationService> logger;
        private readonly AISettings aiSettings;
        private readonly IMcpClient? mcpClient;

        public CodeGenerationService(
            HttpClient httpClient, 
            ICodeAnalysisService codeAnalysisService,
            ILogger<CodeGenerationService> logger,
            IMcpClient? mcpClient = null)
        {
            this.httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            this.codeAnalysisService = codeAnalysisService ?? throw new ArgumentNullException(nameof(codeAnalysisService));
            this.logger = logger ?? throw new ArgumentNullException(nameof(logger));
            this.mcpClient = mcpClient;
            this.aiSettings = AISettings.Instance;
        }        public async Task<string> GenerateCodeAsync(string prompt, string language, CancellationToken cancellationToken = default)
        {
            try
            {
                logger.LogInformation("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è —è–∑—ã–∫–∞ {Language} —Å –ø–æ–º–æ—â—å—é {Provider}", language, aiSettings.SelectedProvider);

                // üß† –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ MCP –ø–∞–º—è—Ç–∏
                var mcpContext = await GetMcpContextAsync(prompt, language, cancellationToken);

                if (!aiSettings.IsConfigured)
                {
                    logger.LogWarning("AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                    return GenerateFallbackTemplate(prompt, language);
                }

                var enhancedPrompt = BuildEnhancedPrompt(prompt, language, mcpContext);
                
                var result = aiSettings.SelectedProvider switch
                {
                    AIProvider.OpenAI => await GenerateWithOpenAIAsync(enhancedPrompt, language, cancellationToken),
                    AIProvider.Claude => await GenerateWithClaudeAsync(enhancedPrompt, language, cancellationToken),
                    AIProvider.Ollama => await GenerateWithOllamaAsync(enhancedPrompt, language, cancellationToken),
                    _ => GenerateFallbackTemplate(prompt, language)
                };                // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ MCP –ø–∞–º—è—Ç—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                if (!string.IsNullOrEmpty(result) && mcpClient?.IsConnected == true)
                {
                    await SaveGeneratedCodeToMemoryAsync(prompt, result, language, cancellationToken);
                }

                logger.LogInformation("–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {Length} —Å–∏–º–≤–æ–ª–æ–≤", result.Length);
                return result;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞");
                return $"// –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {ex.Message}\n\n{GenerateFallbackTemplate(prompt, language)}";
            }
        }

        public async Task<string> RefactorCodeAsync(string code, string instructions, CancellationToken cancellationToken = default)
        {
            try
            {
                logger.LogInformation("–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏: {Instructions}", instructions);

                if (!aiSettings.IsConfigured)
                {
                    logger.LogWarning("AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–∏–º–µ–Ω—è—é –±–∞–∑–æ–≤—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥");
                    var analysisResult = await codeAnalysisService.AnalyzeCodeAsync(code, "csharp", cancellationToken);
                    return ApplyBasicRefactoring(code, instructions, analysisResult);
                }

                var refactorPrompt = BuildRefactorPrompt(code, instructions);
                
                var result = aiSettings.SelectedProvider switch
                {
                    AIProvider.OpenAI => await RefactorWithOpenAIAsync(refactorPrompt, cancellationToken),
                    AIProvider.Claude => await RefactorWithClaudeAsync(refactorPrompt, cancellationToken),
                    AIProvider.Ollama => await RefactorWithOllamaAsync(refactorPrompt, cancellationToken),
                    _ => code
                };

                logger.LogInformation("–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω");
                return result;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ");
                return $"// –û—à–∏–±–∫–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}\n\n{code}";
            }
        }

        #region AI API Methods

        private async Task<string> GenerateWithOpenAIAsync(string prompt, string language, CancellationToken cancellationToken)
        {
            var requestBody = new
            {
                model = aiSettings.OpenAIModel,
                messages = new[]
                {
                    new { role = "system", content = GetSystemPrompt(language) },
                    new { role = "user", content = prompt }
                },
                max_tokens = aiSettings.MaxTokens,
                temperature = aiSettings.Temperature
            };

            var json = JsonSerializer.Serialize(requestBody);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {aiSettings.OpenAIApiKey}");
            httpClient.Timeout = TimeSpan.FromSeconds(aiSettings.TimeoutSeconds);

            var response = await httpClient.PostAsync($"{aiSettings.OpenAIEndpoint}/chat/completions", content, cancellationToken);
            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);

            if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException($"OpenAI API error: {response.StatusCode} - {responseContent}");
            }

            var jsonResponse = JsonSerializer.Deserialize<JsonElement>(responseContent);
            return jsonResponse.GetProperty("choices")[0].GetProperty("message").GetProperty("content").GetString() ?? "";
        }

        private async Task<string> GenerateWithClaudeAsync(string prompt, string language, CancellationToken cancellationToken)
        {
            var requestBody = new
            {
                model = aiSettings.ClaudeModel,
                max_tokens = aiSettings.MaxTokens,
                messages = new[]
                {
                    new { role = "user", content = $"{GetSystemPrompt(language)}\n\n{prompt}" }
                }
            };

            var json = JsonSerializer.Serialize(requestBody);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Add("x-api-key", aiSettings.ClaudeApiKey);
            httpClient.DefaultRequestHeaders.Add("anthropic-version", "2023-06-01");
            httpClient.Timeout = TimeSpan.FromSeconds(aiSettings.TimeoutSeconds);

            var response = await httpClient.PostAsync("https://api.anthropic.com/v1/messages", content, cancellationToken);
            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);

            if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException($"Claude API error: {response.StatusCode} - {responseContent}");
            }

            var jsonResponse = JsonSerializer.Deserialize<JsonElement>(responseContent);
            return jsonResponse.GetProperty("content")[0].GetProperty("text").GetString() ?? "";
        }

        private async Task<string> GenerateWithOllamaAsync(string prompt, string language, CancellationToken cancellationToken)
        {
            var requestBody = new
            {
                model = aiSettings.OllamaModel,
                prompt = $"{GetSystemPrompt(language)}\n\n{prompt}",
                stream = false
            };

            var json = JsonSerializer.Serialize(requestBody);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            httpClient.Timeout = TimeSpan.FromSeconds(aiSettings.TimeoutSeconds);

            var response = await httpClient.PostAsync($"{aiSettings.OllamaEndpoint}/api/generate", content, cancellationToken);
            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);

            if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException($"Ollama API error: {response.StatusCode} - {responseContent}");
            }

            var jsonResponse = JsonSerializer.Deserialize<JsonElement>(responseContent);
            return jsonResponse.GetProperty("response").GetString() ?? "";
        }

        private async Task<string> RefactorWithOpenAIAsync(string prompt, CancellationToken cancellationToken)
        {
            return await GenerateWithOpenAIAsync(prompt, "csharp", cancellationToken);
        }

        private async Task<string> RefactorWithClaudeAsync(string prompt, CancellationToken cancellationToken)
        {
            return await GenerateWithClaudeAsync(prompt, "csharp", cancellationToken);
        }

        private async Task<string> RefactorWithOllamaAsync(string prompt, CancellationToken cancellationToken)
        {
            return await GenerateWithOllamaAsync(prompt, "csharp", cancellationToken);
        }

        #endregion

        #region Prompt Building

        private string BuildRefactorPrompt(string code, string instructions)
        {
            var prompt = new StringBuilder();
            prompt.AppendLine("–û—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:");
            prompt.AppendLine();
            prompt.AppendLine("–ò–ù–°–¢–†–£–ö–¶–ò–ò:");
            prompt.AppendLine(instructions);
            prompt.AppendLine();
            prompt.AppendLine("–ò–°–•–û–î–ù–´–ô –ö–û–î:");
            prompt.AppendLine(code);
            prompt.AppendLine();
            prompt.AppendLine("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É:");
            prompt.AppendLine("- –°–æ—Ö—Ä–∞–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å");
            prompt.AppendLine("- –£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
            prompt.AppendLine("- –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º");
            prompt.AppendLine("- –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π –∫–æ–¥");

            return prompt.ToString();
        }

        private string GetSystemPrompt(string language)
        {
            return language.ToLowerInvariant() switch
            {
                "csharp" or "cs" => "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ C# –∏ .NET. –°–æ–∑–¥–∞–≤–∞–π —á–∏—Å—Ç—ã–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏ —Ö–æ—Ä–æ—à–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–ª–µ–¥—É—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º C#.",
                "javascript" or "js" => "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ JavaScript. –°–æ–∑–¥–∞–≤–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π ES6+ –∫–æ–¥ —Å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏.",
                "typescript" or "ts" => "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ TypeScript. –°–æ–∑–¥–∞–≤–∞–π —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–¥ —Å –ø–æ–ª–Ω—ã–º–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏ —Ç–∏–ø–æ–≤.",
                "python" or "py" => "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Python. –°–ª–µ–¥—É–π PEP 8 –∏ —Å–æ–∑–¥–∞–≤–∞–π –ø–∏—Ç–æ–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–¥.",
                _ => $"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞ —è–∑—ã–∫–µ {language}."
            };
        }

        #endregion

        #region Fallback Templates

        private string GenerateFallbackTemplate(string prompt, string language)
        {
            return language.ToLowerInvariant() switch
            {
                "csharp" or "cs" => GenerateCSharpTemplate(prompt),
                "javascript" or "js" => GenerateJavaScriptTemplate(prompt),
                "typescript" or "ts" => GenerateTypeScriptTemplate(prompt),
                "python" or "py" => GeneratePythonTemplate(prompt),
                _ => GenerateGenericTemplate(prompt, language)
            };
        }

        private string GenerateCSharpTemplate(string prompt)
        {
            if (prompt.Contains("–∫–ª–∞—Å—Å", StringComparison.OrdinalIgnoreCase) || 
                prompt.Contains("class", StringComparison.OrdinalIgnoreCase))
            {
                return CodeTemplates.GenerateClassTemplate(prompt);
            }
            
            if (prompt.Contains("–º–µ—Ç–æ–¥", StringComparison.OrdinalIgnoreCase) || 
                prompt.Contains("method", StringComparison.OrdinalIgnoreCase))
            {
                return CodeTemplates.GenerateMethodTemplate(prompt);
            }
            
            return CodeTemplates.GenerateGenericCSharpTemplate(prompt);
        }

        private string GenerateJavaScriptTemplate(string prompt)
        {
            return $@"// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞: {prompt}
// TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

function generatedFunction() {{
    // TODO: –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –∑–¥–µ—Å—å
    console.log('JavaScript –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
}}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
// module.exports = generatedFunction;";
        }

        private string GenerateTypeScriptTemplate(string prompt)
        {
            return $@"// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TypeScript –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞: {prompt}
// TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

interface GeneratedInterface {{
    // TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
}}

function generatedFunction(): void {{
    // TODO: –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –∑–¥–µ—Å—å
    console.log('TypeScript –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
}}

export {{ generatedFunction }};";
        }        private string GeneratePythonTemplate(string prompt)
        {
            return $@"# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Python –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞: {prompt}
# TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

def generated_function():
    """"""
    TODO: –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    """"""
    # TODO: –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –∑–¥–µ—Å—å
    print('Python –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!')

if __name__ == '__main__':
    generated_function()";
        }

        private string GenerateGenericTemplate(string prompt, string language)
        {
            return $@"// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ ({language}) –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞: {prompt}
// TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç—Ä–µ–±—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

// –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
// –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —è–∑—ã–∫–∞: {language}";
        }

        #endregion

        #region Basic Refactoring

        private string ApplyBasicRefactoring(string code, string instructions, CodeAnalysisResult analysisResult)
        {
            var refactoredCode = code;
            var instructionsLower = instructions.ToLowerInvariant();

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            if (instructionsLower.Contains("–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å") || instructionsLower.Contains("performance"))
            {
                refactoredCode = ApplyPerformanceRefactoring(refactoredCode);
            }

            if (instructionsLower.Contains("—á–∏—Ç–∞–µ–º–æ—Å—Ç—å") || instructionsLower.Contains("readability"))
            {
                refactoredCode = ApplyReadabilityRefactoring(refactoredCode);
            }

            if (instructionsLower.Contains("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫") || instructionsLower.Contains("error handling"))
            {
                refactoredCode = AddErrorHandling(refactoredCode);
            }

            if (instructionsLower.Contains("—É–ø—Ä–æ—Å—Ç–∏—Ç—å") || instructionsLower.Contains("simplify"))
            {
                refactoredCode = SimplifyCode(refactoredCode);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            var header = $"// –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–º–µ–Ω–µ–Ω: {instructions}\n// –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {analysisResult.Issues.Count()}\n\n";
            
            return header + refactoredCode;
        }

        private string ApplyPerformanceRefactoring(string code)
        {
            // –ü—Ä–æ—Å—Ç—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            code = code.Replace("string += ", "stringBuilder.Append(");
            code = code.Replace("new List<>()", "new List<>() // TODO: –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –µ–º–∫–æ—Å—Ç—å –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞");
            
            return code;
        }

        private string ApplyReadabilityRefactoring(string code)
        {
            // –£–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            var lines = code.Split('\n');
            var result = new StringBuilder();
            
            foreach (var line in lines)
            {
                var trimmedLine = line.Trim();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º
                if (trimmedLine.Contains("&&") || trimmedLine.Contains("||"))
                {
                    result.AppendLine("        // TODO: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—ã–Ω–µ—Å–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é");
                }
                
                result.AppendLine(line);
            }
            
            return result.ToString();
        }

        private string AddErrorHandling(string code)
        {
            // –ë–∞–∑–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            if (!code.Contains("try") && !code.Contains("catch"))
            {
                return $@"try
{{
{code}
}}
catch (Exception ex)
{{
    // TODO: –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    throw new InvalidOperationException(""–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"", ex);
}}";
            }
            
            return code;
        }

        private string SimplifyCode(string code)
        {
            // –£–ø—Ä–æ—â–µ–Ω–∏–µ –∫–æ–¥–∞
            code = code.Replace("if (condition == true)", "if (condition)");
            code = code.Replace("if (condition == false)", "if (!condition)");
            code = code.Replace("?.ToString() ?? \"\"", "?.ToString() ?? string.Empty");
            
            return code;
        }

        #endregion

        #region MCP Integration        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ MCP –ø–∞–º—è—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
        /// </summary>
        private async Task<string> GetMcpContextAsync(string prompt, string language, CancellationToken cancellationToken)
        {
            if (mcpClient?.IsConnected != true)
                return string.Empty;

            try
            {
                // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–π –∫–æ–¥ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
                var searchRequest = new Dictionary<string, object>
                {
                    ["query"] = prompt,
                    ["projectId"] = "CodeProviderExtension",
                    ["maxResults"] = 3,
                    ["artifactType"] = "CodeSnippet"
                };                var searchResult = await mcpClient.Tools.CallToolAsync("SearchProjectArtifacts", searchRequest, cancellationToken);
                var searchResultString = searchResult?.ToString();
                
                if (!string.IsNullOrEmpty(searchResultString))
                {
                    logger.LogInformation("–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ MCP –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: {Prompt}", prompt);
                    return $"\n\n--- –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ ---\n{searchResultString}\n--- –ö–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---\n";
                }
            }
            catch (Exception ex)
            {
                logger.LogWarning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ MCP: {Error}", ex.Message);
            }

            return string.Empty;
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ MCP –ø–∞–º—è—Ç—å
        /// </summary>
        private async Task SaveGeneratedCodeToMemoryAsync(string prompt, string code, string language, CancellationToken cancellationToken)
        {
            if (mcpClient?.IsConnected != true)
                return;

            try
            {
                var saveRequest = new Dictionary<string, object>
                {
                    ["title"] = $"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π {language} –∫–æ–¥: {prompt.Substring(0, Math.Min(prompt.Length, 50))}...",
                    ["content"] = code,
                    ["projectId"] = "CodeProviderExtension",
                    ["type"] = "CodeSnippet",
                    ["tags"] = $"generated,{language},ai",
                    ["metadata"] = System.Text.Json.JsonSerializer.Serialize(new
                    {
                        originalPrompt = prompt,
                        language = language,
                        generatedAt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                        provider = aiSettings.SelectedProvider.ToString()
                    })
                };

                await mcpClient.Tools.CallToolAsync("SaveProjectArtifact", saveRequest, cancellationToken);
                logger.LogInformation("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MCP –ø–∞–º—è—Ç—å");
            }
            catch (Exception ex)
            {
                logger.LogWarning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ –≤ MCP: {Error}", ex.Message);
            }
        }

        /// <summary>
        /// –°—Ç—Ä–æ–∏—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º MCP –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        /// </summary>
        private string BuildEnhancedPrompt(string originalPrompt, string language, string mcpContext = "")
        {
            var enhancedPrompt = new StringBuilder();
            
            enhancedPrompt.AppendLine($"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {language} –∫–æ–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:");
            enhancedPrompt.AppendLine($"–ó–∞–ø—Ä–æ—Å: {originalPrompt}");
            enhancedPrompt.AppendLine();
            
            if (!string.IsNullOrEmpty(mcpContext))
            {
                enhancedPrompt.AppendLine("–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:");
                enhancedPrompt.AppendLine(mcpContext);
                enhancedPrompt.AppendLine();
            }
            
            enhancedPrompt.AppendLine("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:");
            enhancedPrompt.AppendLine("- –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å—Ç—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º");
            enhancedPrompt.AppendLine("- –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤");
            enhancedPrompt.AppendLine("- –ò—Å–ø–æ–ª—å–∑—É–π –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —è–∑—ã–∫–∞");
            enhancedPrompt.AppendLine("- –û–±—Ä–∞–±–æ—Ç–∞–π –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏");
            enhancedPrompt.AppendLine();
            enhancedPrompt.AppendLine("–í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.");

            return enhancedPrompt.ToString();
        }

        #endregion
    }
}
