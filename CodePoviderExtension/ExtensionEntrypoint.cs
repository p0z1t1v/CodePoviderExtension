using Microsoft.Extensions.DependencyInjection;
using Microsoft.VisualStudio.Extensibility;
using CodeProviderExtension;
using CodePoviderExtension.MCP;

namespace CodeProviderExtension
{
    /// <summary>
    /// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º VisualStudio.Extensibility.
    /// </summary>
    [VisualStudioContribution]
    internal class ExtensionEntrypoint : Extension
    {
        /// <inheritdoc/>
        public override ExtensionConfiguration ExtensionConfiguration => new()
        {
            Metadata = new(
                    id: "CodeProviderExtension.4424dff2-f259-4d92-ac1f-a1853a5d2845",
                    version: this.ExtensionAssemblyVersion,
                    publisherName: "CodeProvider Team",
                    displayName: "Code Provider Extension",
                    description: "–ú–æ—â–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"),
        };        /// <inheritdoc />
        protected override void InitializeServices(IServiceCollection serviceCollection)
        {
            base.InitializeServices(serviceCollection);

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º
            serviceCollection.AddSingleton<ICodeAnalysisService, CodeAnalysisService>();
            serviceCollection.AddSingleton<ICodeGenerationService, CodeGenerationService>();
            serviceCollection.AddSingleton<IDocumentationService, DocumentationService>();
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è CodeLens
            serviceCollection.AddSingleton<SimpleCodeLensAnalyzer>();
            
            // –î–æ–±–∞–≤–ª—è–µ–º HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API
            serviceCollection.AddHttpClient();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            serviceCollection.AddLogging();

            // üî• –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø MCP –°–ï–†–í–ò–°–û–í
            ConfigureMcpServices(serviceCollection);
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MCP —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Model Context Protocol
        /// </summary>
        private void ConfigureMcpServices(IServiceCollection services)
        {
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            var mcpConfig = new CodeProviderExtension.McpConfiguration
            {
                ServerUrl = "http://localhost:3000", // my-memory —Å–µ—Ä–≤–µ—Ä
                EnableVerboseLogging = true,
                ConnectionTimeoutMs = 10000,
                RequestTimeoutMs = 30000,
                EnableCaching = true,
                CacheExpiration = 60
            };

            services.AddSingleton(mcpConfig);
            
            // –ö—ç—à-—Å–µ—Ä–≤–∏—Å –¥–ª—è MCP
            services.AddSingleton<CodePoviderExtension.MCP.McpCacheService>();
            
            // –û—Å–Ω–æ–≤–Ω–æ–π MCP –∫–ª–∏–µ–Ω—Ç
            services.AddSingleton<CodePoviderExtension.MCP.IMcpClient, CodePoviderExtension.MCP.McpClient>();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è MCP
            services.AddHttpClient<CodePoviderExtension.MCP.McpClient>();
        }
    }

    /// <summary>
    /// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞.
    /// </summary>
    public interface ICodeAnalysisService
    {
        Task<CodeAnalysisResult> AnalyzeCodeAsync(string code, string language, CancellationToken cancellationToken = default);
        Task<IEnumerable<CodeSuggestion>> GetSuggestionsAsync(string code, string language, CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞.
    /// </summary>
    public interface ICodeGenerationService
    {
        Task<string> GenerateCodeAsync(string prompt, string language, CancellationToken cancellationToken = default);
        Task<string> RefactorCodeAsync(string code, string instructions, CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    /// </summary>
    public interface IDocumentationService
    {
        Task<string> GenerateDocumentationAsync(string code, string language, CancellationToken cancellationToken = default);
        Task<string> ExplainCodeAsync(string code, string language, CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞.
    /// </summary>
    public class CodeAnalysisResult
    {
        public required string Language { get; init; }
        public required int LineCount { get; init; }
        public required int CharacterCount { get; init; }
        public required IEnumerable<string> Classes { get; init; }
        public required IEnumerable<string> Methods { get; init; }
        public required IEnumerable<CodeIssue> Issues { get; init; }
        public required double ComplexityScore { get; init; }
    }

    /// <summary>
    /// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–¥–∞.
    /// </summary>
    public class CodeSuggestion
    {
        public required string Title { get; init; }
        public required string Description { get; init; }
        public required SuggestionType Type { get; init; }
        public required int StartLine { get; init; }
        public required int EndLine { get; init; }
        public string? SuggestedCode { get; init; }
    }

    /// <summary>
    /// –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ.
    /// </summary>
    public class CodeIssue
    {
        public required string Message { get; init; }
        public required IssueSeverity Severity { get; init; }
        public required int Line { get; init; }
        public required int Column { get; init; }
        public string? QuickFix { get; init; }
    }

    /// <summary>
    /// –¢–∏–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
    /// </summary>
    public enum SuggestionType
    {
        Performance,
        Readability,
        BestPractice,
        Security,
        Refactoring
    }

    /// <summary>
    /// –£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º.
    /// </summary>
    public enum IssueSeverity
    {
        Info,
        Warning,
        Error,
        Critical
    }
}
