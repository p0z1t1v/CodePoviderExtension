using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.VisualStudio.Extensibility;
using Microsoft.VisualStudio.Extensibility.Commands;
using Microsoft.VisualStudio.Extensibility.Shell;
using Microsoft.VisualStudio.Extensibility.Editor;
using CodePoviderExtension.MCP;

namespace CodeProviderExtension
{
    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ MCP my-memory —Å–µ—Ä–≤–µ—Ä
    /// </summary>
    [VisualStudioContribution]
    internal class ProjectMemoryCommand : Command
    {
        private readonly TraceSource logger;
        private readonly IMcpClient mcpClient;

        public ProjectMemoryCommand(
            VisualStudioExtensibility extensibility,
            TraceSource traceSource,
            IMcpClient mcpClient) : base(extensibility)
        {
            this.logger = traceSource ?? throw new ArgumentNullException(nameof(traceSource));
            this.mcpClient = mcpClient ?? throw new ArgumentNullException(nameof(mcpClient));
        }

        public override CommandConfiguration CommandConfiguration => new("üß† –ü–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞")
        {
            TooltipText = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ MCP",
            Placements = new[] { CommandPlacement.KnownPlacements.ExtensionsMenu }
        };

        public override async Task ExecuteCommandAsync(IClientContext context, CancellationToken ct)
        {
            try
            {
                logger.TraceEvent(TraceEventType.Information, 0, "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é –ø—Ä–æ–µ–∫—Ç–∞");

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if (!mcpClient.IsConnected)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP...", 
                        PromptOptions.OK, ct);
                    
                    await mcpClient.InitializeAsync(ct);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ my-memory —Å–µ—Ä–≤–µ—Ä—É
                if (mcpClient.IsConnected)
                {
                    await ShowProjectMemoryDialog(context, ct);
                }
                else
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É my-memory. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000", 
                        PromptOptions.OK, ct);
                }
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–∞–º—è—Ç—å—é –ø—Ä–æ–µ–∫—Ç–∞: {ex.Message}");
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"–û—à–∏–±–∫–∞: {ex.Message}", 
                    PromptOptions.OK, ct);
            }
        }

        private async Task ShowProjectMemoryDialog(IClientContext context, CancellationToken ct)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
                var toolRequest = new Dictionary<string, object>
                {
                    { "name", "GetMemoryStatistics" },
                    { "arguments", new Dictionary<string, object>() }
                };

                var result = await mcpClient.Tools.CallToolAsync("GetMemoryStatistics", toolRequest, ct);
                
                if (result != null)
                {
                    var message = $"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n\n{result}";
                    
                    var choice = await this.Extensibility.Shell().ShowPromptAsync(
                        message, 
                        PromptOptions.OKCancel, 
                        ct);

                    if (choice)
                    {
                        await ShowMemoryManagement(context, ct);
                    }
                }
                else
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ, my-memory —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", 
                        PromptOptions.OK, ct);
                }
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {ex.Message}");
                await this.Extensibility.Shell().ShowPromptAsync(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–∞–º—è—Ç–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ my-memory —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π:\nnpx @modelcontextprotocol/server-memory", 
                    PromptOptions.OK, ct);
            }
        }

        private async Task ShowMemoryManagement(IClientContext context, CancellationToken ct)
        {
            var choice = await this.Extensibility.Shell().ShowPromptAsync(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –≤ –ø–∞–º—è—Ç—å\n2. –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–π –∫–æ–¥\n3. –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞\n4. –≠–∫—Å–ø–æ—Ä—Ç –ø–∞–º—è—Ç–∏", 
                PromptOptions.OKCancel, 
                ct);

            if (choice)
            {
                await SaveCurrentCodeToMemory(context, ct);
            }
        }

        private async Task SaveCurrentCodeToMemory(IClientContext context, CancellationToken ct)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                var activeTextView = await this.Extensibility.Editor().GetActiveTextViewAsync(context, ct);
                if (activeTextView == null)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                        PromptOptions.OK, ct);
                    return;
                }

                var documentSnapshot = activeTextView.Document;
                var contentRange = documentSnapshot.Text; // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                var content = contentRange.CopyToString(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è CopyToString –¥–ª—è TextRange
                var fileName = documentSnapshot.Uri.LocalPath;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ my-memory
                var saveRequest = new Dictionary<string, object>
                {
                    { "title", $"–§–∞–π–ª: {System.IO.Path.GetFileName(fileName)}" },
                    { "content", content },
                    { "projectId", "CodeProviderExtension" },
                    { "type", "CodeSnippet" },
                    { "metadata", System.Text.Json.JsonSerializer.Serialize(new {
                        filePath = fileName,
                        language = GetLanguageFromFileName(fileName),
                        timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
                    }) }
                };

                var result = await mcpClient.Tools.CallToolAsync("SaveProjectArtifact", saveRequest, ct);

                await this.Extensibility.Shell().ShowPromptAsync(
                    $"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞!\n\n–§–∞–π–ª: {System.IO.Path.GetFileName(fileName)}\n–†–∞–∑–º–µ—Ä: {content.Length} —Å–∏–º–≤–æ–ª–æ–≤",
                    PromptOptions.OK, ct);
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞: {ex.Message}");
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {ex.Message}",
                    PromptOptions.OK, ct);
            }
        }

        private async Task SearchInMemory(IClientContext context, CancellationToken ct)
        {
            try
            {
                var searchRequest = new Dictionary<string, object>
                {
                    { "query", "–∫–æ–¥" },
                    { "projectId", "CodeProviderExtension" },
                    { "maxResults", 5 }
                };

                var result = await mcpClient.Tools.CallToolAsync("SearchProjectArtifacts", searchRequest, ct);
                
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n{result}", 
                    PromptOptions.OK, ct);
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {ex.Message}");
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {ex.Message}", 
                    PromptOptions.OK, ct);
            }
        }

        private async Task ClearProjectMemory(IClientContext context, CancellationToken ct)
        {
            var confirm = await this.Extensibility.Shell().ShowPromptAsync(
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞?", 
                PromptOptions.OKCancel, ct);

            if (confirm)
            {
                try
                {
                    var clearRequest = new Dictionary<string, object> { { "sessionId", "CodeProviderExtension" } };
                    await mcpClient.Tools.CallToolAsync("ClearChatSession", clearRequest, ct);
                    
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "‚úÖ –ü–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –æ—á–∏—â–µ–Ω–∞", 
                        PromptOptions.OK, ct);
                }
                catch (Exception ex)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        $"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {ex.Message}", 
                        PromptOptions.OK, ct);
                }
            }
        }

        private async Task ExportProjectMemory(IClientContext context, CancellationToken ct)
        {
            try
            {
                var exportRequest = new Dictionary<string, object>
                {
                    { "projectId", "CodeProviderExtension" },
                    { "format", "markdown" },
                    { "includeMetadata", true }
                };

                var result = await mcpClient.Tools.CallToolAsync("ExportProject", exportRequest, ct);
                
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"üìÑ –≠–∫—Å–ø–æ—Ä—Ç –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n\n{result}", 
                    PromptOptions.OK, ct);
            }
            catch (Exception ex)
            {
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}", 
                    PromptOptions.OK, ct);
            }
        }

        private static string GetLanguageFromFileName(string fileName)
        {
            var extension = System.IO.Path.GetExtension(fileName).ToLowerInvariant();
            return extension switch
            {
                ".cs" => "csharp",
                ".js" => "javascript",
                ".ts" => "typescript",
                ".py" => "python",
                ".java" => "java",
                ".cpp" or ".cc" or ".cxx" => "cpp",
                ".c" => "c",
                ".html" => "html",
                ".css" => "css",
                ".json" => "json",
                ".xml" => "xml",
                _ => "text"
            };
        }
    }
}
