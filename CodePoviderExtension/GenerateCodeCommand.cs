using System.Diagnostics;
using System.Net.Http;
using Microsoft;
using Microsoft.VisualStudio.Extensibility;
using Microsoft.VisualStudio.Extensibility.Commands;
using Microsoft.VisualStudio.Extensibility.Shell;

namespace CodeProviderExtension
{
    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    /// </summary>
    [VisualStudioContribution]
    internal class GenerateCodeCommand : Command
    {
        private readonly TraceSource logger;

        public override CommandConfiguration CommandConfiguration => new("%CodeProviderExtension.GenerateCode.DisplayName%")
        {
            TooltipText = "%CodeProviderExtension.GenerateCode.TooltipText%",
            Icon = null,
            EnabledWhen = null,
            VisibleWhen = null
        };

        public GenerateCodeCommand(VisualStudioExtensibility extensibility) : base(extensibility)
        {
            this.logger = new TraceSource("GenerateCodeCommand");
        }        public override async Task ExecuteCommandAsync(IClientContext context, CancellationToken cancellationToken)
        {
            try
            {
                this.logger.TraceInformation("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞");

                // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
                var httpClient = new HttpClient();
                var codeAnalysisService = new CodeAnalysisService(httpClient);
                var codeGenerationService = new CodeGenerationService(httpClient, codeAnalysisService);

                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                var activeTextView = await this.Extensibility.Editor().GetActiveTextViewAsync(context, cancellationToken);
                
                if (activeTextView == null)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞!", 
                        PromptOptions.OK, 
                        cancellationToken);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
                var documentUri = activeTextView.Document.Uri;
                var fileName = System.IO.Path.GetFileName(documentUri.LocalPath);
                var fileExtension = System.IO.Path.GetExtension(fileName).TrimStart('.');

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
                var userPrompt = "–ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–ª–∞—Å—Å–∞";
                this.logger.TraceInformation($"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {userPrompt}");

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
                var generatedCode = await codeGenerationService.GenerateCodeAsync(
                    userPrompt, 
                    fileExtension, 
                    cancellationToken);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {userPrompt}\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫: {generatedCode.Split('\n').Length}\n\nüìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:\n{generatedCode.Substring(0, Math.Min(generatedCode.Length, 500))}...",
                    PromptOptions.OK,
                    cancellationToken);
            }
            catch (Exception ex)
            {
                this.logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {ex.Message}");
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {ex.Message}", 
                    PromptOptions.OK, 
                    cancellationToken);
            }
        }
    }
}
