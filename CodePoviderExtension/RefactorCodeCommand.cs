using System.Diagnostics;
using System.Text;
using Microsoft;
using Microsoft.VisualStudio.Extensibility;
using Microsoft.VisualStudio.Extensibility.Commands;
using Microsoft.VisualStudio.Extensibility.Shell;

namespace CodeProviderExtension
{
    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.
    /// </summary>
    [VisualStudioContribution]
    internal class RefactorCodeCommand : Command
    {
        private readonly TraceSource logger;
        private readonly ICodeGenerationService codeGenerationService;        public override CommandConfiguration CommandConfiguration => new("%CodeProviderExtension.RefactorCode.DisplayName%")
        {
            TooltipText = "%CodeProviderExtension.RefactorCode.TooltipText%",
            Icon = null,
            EnabledWhen = null,
            VisibleWhen = null
        };

        public RefactorCodeCommand(TraceSource traceSource, ICodeGenerationService codeGenerationService)
        {
            this.logger = Requires.NotNull(traceSource, nameof(traceSource));
            this.codeGenerationService = Requires.NotNull(codeGenerationService, nameof(codeGenerationService));
        }

        public override async Task ExecuteCommandAsync(IClientContext context, CancellationToken cancellationToken)
        {
            try
            {
                this.logger.TraceInformation("–ù–∞—á–∞–ª–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–¥–∞");

                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                var activeTextView = await this.Extensibility.Editor().GetActiveTextViewAsync(context, cancellationToken);
                
                if (activeTextView == null)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞!", 
                        PromptOptions.OK, 
                        cancellationToken);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                var selection = activeTextView.Selection;
                if (selection.IsEmpty)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–í—ã–¥–µ–ª–∏—Ç–µ –∫–æ–¥ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞!",
                        PromptOptions.OK,
                        cancellationToken);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–¥
                var selectedCode = selection.Extent.ToString() ?? "";
                if (string.IsNullOrWhiteSpace(selectedCode))
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç!", 
                        PromptOptions.OK, 
                        cancellationToken);
                    return;
                }                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                var instructions = "–£–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å best practices";
                this.logger.TraceInformation($"–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏: {instructions}");

                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
                var refactoredCode = await this.codeGenerationService.RefactorCodeAsync(
                    selectedCode, 
                    instructions, 
                    cancellationToken);                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                var resultDialog = BuildPreviewDialog(selectedCode, refactoredCode, instructions);
                await this.Extensibility.Shell().ShowPromptAsync(
                    resultDialog,
                    PromptOptions.OK,
                    cancellationToken);
            }
            catch (Exception ex)
            {
                this.logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ: {ex.Message}");
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}", 
                    PromptOptions.OK, 
                    cancellationToken);
            }
        }

        private static string[] GetRefactoringOptions()
        {
            return new[]
            {
                "–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                "–ü–æ–≤—ã—Å–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å",
                "–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫",
                "–£–ø—Ä–æ—Å—Ç–∏—Ç—å –∫–æ–¥",
                "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                "–ü—Ä–∏–º–µ–Ω–∏—Ç—å best practices"
            };
        }

        private static string ParseRefactoringInstructions(string userInput, string[] options)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏
            if (int.TryParse(userInput.Trim(), out var optionNumber) && 
                optionNumber >= 1 && optionNumber <= options.Length)
            {
                return options[optionNumber - 1];
            }

            // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return userInput;
        }

        private static string BuildPreviewDialog(string originalCode, string refactoredCode, string instructions)
        {
            var dialog = new StringBuilder();
            
            dialog.AppendLine("üîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê");
            dialog.AppendLine(new string('‚ïê', 60));
            dialog.AppendLine($"üìù –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {instructions}");
            dialog.AppendLine();
            
            dialog.AppendLine("üìã –ò–°–•–û–î–ù–´–ô –ö–û–î:");
            dialog.AppendLine(new string('‚îÄ', 30));
            var originalLines = originalCode.Split('\n');
            for (int i = 0; i < Math.Min(originalLines.Length, 10); i++)
            {
                dialog.AppendLine($"  {i + 1:D2} | {originalLines[i]}");
            }
            if (originalLines.Length > 10)
            {
                dialog.AppendLine($"  ... –µ—â—ë {originalLines.Length - 10} —Å—Ç—Ä–æ–∫");
            }
            dialog.AppendLine();
            
            dialog.AppendLine("‚ú® –†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î:");
            dialog.AppendLine(new string('‚îÄ', 30));
            var refactoredLines = refactoredCode.Split('\n');
            for (int i = 0; i < Math.Min(refactoredLines.Length, 10); i++)
            {
                dialog.AppendLine($"  {i + 1:D2} | {refactoredLines[i]}");
            }
            if (refactoredLines.Length > 10)
            {
                dialog.AppendLine($"  ... –µ—â—ë {refactoredLines.Length - 10} —Å—Ç—Ä–æ–∫");
            }
            dialog.AppendLine();
            
            dialog.AppendLine("‚ùì –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥?");
            
            return dialog.ToString();
        }
    }
}
