using System;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.VisualStudio.Extensibility;
using Microsoft.VisualStudio.Extensibility.Commands;
using Microsoft.VisualStudio.Extensibility.Shell;
using CodeProviderExtension.MCP;
using CodePoviderExtension.MCP;

namespace CodeProviderExtension
{
    /// <summary>
    /// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MCP –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    /// </summary>
    [VisualStudioContribution]
    internal class EnhancedAnalyzeCodeCommand : Command
    {
        private readonly TraceSource logger;
        private readonly ICodeAnalysisService codeAnalysisService;
        private readonly IMcpClient mcpClient;

        public EnhancedAnalyzeCodeCommand(
            VisualStudioExtensibility extensibility,
            TraceSource traceSource,
            ICodeAnalysisService codeAnalysisService,
            IMcpClient mcpClient) : base(extensibility)
        {
            this.logger = traceSource ?? throw new ArgumentNullException(nameof(traceSource));
            this.codeAnalysisService = codeAnalysisService ?? throw new ArgumentNullException(nameof(codeAnalysisService));
            this.mcpClient = mcpClient ?? throw new ArgumentNullException(nameof(mcpClient));
        }

        public override CommandConfiguration CommandConfiguration => new("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (MCP)")
        {
            TooltipText = "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MCP",
            Placements = [CommandPlacement.KnownPlacements.ExtensionsMenu]
        };

        public override async Task ExecuteCommandAsync(IClientContext context, CancellationToken ct)
        {
            try
            {
                logger.TraceInformation("–ù–∞—á–∞–ª–æ MCP-–∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞");

                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                var activeTextView = await this.Extensibility.Editor().GetActiveTextViewAsync(context, ct);
                if (activeTextView == null)
                {
                    await ShowErrorAsync("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!", ct);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–¥
                var selection = activeTextView.Selection;
                if (selection.IsEmpty)
                {
                    await ShowErrorAsync("–í—ã–¥–µ–ª–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!", ct);
                    return;
                }

                var selectedCode = selection.Extent.ToString() ?? "";
                if (string.IsNullOrWhiteSpace(selectedCode))
                {
                    await ShowErrorAsync("–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç!", ct);
                    return;
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
                var documentUri = activeTextView.Document.Uri;
                var fileName = System.IO.Path.GetFileName(documentUri.LocalPath);
                var language = GetLanguageFromFileName(fileName);

                logger.TraceInformation($"MCP-–∞–Ω–∞–ª–∏–∑: {selectedCode.Length} —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —è–∑—ã–∫–µ {language}");

                // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                var analysisResult = await PerformEnhancedAnalysisAsync(selectedCode, language, fileName, ct);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await ShowAnalysisResultAsync(analysisResult, ct);
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ MCP-–∞–Ω–∞–ª–∏–∑–∞: {ex.Message}");
                await ShowErrorAsync($"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {ex.Message}", ct);
            }
        }

        private async Task<EnhancedAnalysisResult> PerformEnhancedAnalysisAsync(
            string code, string language, string fileName, CancellationToken ct)
        {
            var result = new EnhancedAnalysisResult { FileName = fileName };

            try
            {
                // 1. –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
                logger.TraceInformation("–í—ã–ø–æ–ª–Ω—è—é –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...");
                result.BasicAnalysis = await codeAnalysisService.AnalyzeCodeAsync(code, language, ct);

                // 2. MCP –∫–æ–Ω—Ç–µ–∫—Å—Ç: –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                if (mcpClient.IsConnected)
                {
                    logger.TraceInformation("–ü–æ–ª—É—á–∞—é MCP –∫–æ–Ω—Ç–µ–∫—Å—Ç...");
                    result.McpContext = await GetMcpContextAsync(code, language, ct);

                    // 3. MCP –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    logger.TraceInformation("–í—ã–ø–æ–ª–Ω—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π MCP –∞–Ω–∞–ª–∏–∑...");
                    result.ContextualAnalysis = await PerformMcpAnalysisAsync(code, language, result.McpContext, ct);

                    // 4. MCP —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    logger.TraceInformation("–ì–µ–Ω–µ—Ä–∏—Ä—É—é MCP —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...");
                    result.McpRecommendations = await GetMcpRecommendationsAsync(code, result.BasicAnalysis, ct);
                }
                else
                {
                    logger.TraceEvent(TraceEventType.Warning, 0, "MCP –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑");
                    result.McpContext = new McpAnalysisContext { IsAvailable = false };
                }
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {ex.Message}");
                result.Error = ex.Message;
            }

            return result;
        }

        private async Task<McpAnalysisContext> GetMcpContextAsync(string code, string language, CancellationToken ct)
        {
            var context = new McpAnalysisContext { IsAvailable = true };

            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                var resources = await mcpClient.Resources.ListResourcesAsync(ct);
                context.AvailableResources = resources.ToList();

                // –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
                var relevantResources = await mcpClient.Resources.FindResourcesAsync($".{language}", ct);
                context.RelevantFiles = relevantResources.ToList();

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
                var projectInfo = await mcpClient.Resources.ReadResourceAsync("context://project-info", ct);
                context.ProjectInfo = projectInfo;

                logger.TraceInformation($"MCP –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context.AvailableResources.Count} —Ä–µ—Å—É—Ä—Å–æ–≤, {context.RelevantFiles.Count} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤");
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Warning, 0, $"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MCP –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {ex.Message}");
                context.Error = ex.Message;
            }

            return context;
        }

        private async Task<object> PerformMcpAnalysisAsync(string code, string language, McpAnalysisContext context, CancellationToken ct)
        {
            try
            {
                var analysisArgs = new Dictionary<string, object>
                {
                    ["code"] = code,
                    ["language"] = language,
                    ["context"] = context.ProjectInfo ?? "",
                    ["relatedFiles"] = context.RelevantFiles.Select(f => f.Name).ToArray()
                };

                return await mcpClient.Tools.CallToolAsync("analyze-code", analysisArgs, ct);
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Warning, 0, $"–û—à–∏–±–∫–∞ MCP –∞–Ω–∞–ª–∏–∑–∞: {ex.Message}");
                return new { error = ex.Message };
            }
        }

        private async Task<McpPromptResult> GetMcpRecommendationsAsync(string code, CodeAnalysisResult basicAnalysis, CancellationToken ct)
        {
            try
            {
                var promptArgs = new Dictionary<string, object>
                {
                    ["analysisResult"] = new
                    {
                        complexity = basicAnalysis.ComplexityScore,
                        issues = basicAnalysis.Issues.Count(),
                        classes = basicAnalysis.Classes.Count(),
                        methods = basicAnalysis.Methods.Count()
                    },
                    ["codeComplexity"] = basicAnalysis.ComplexityScore,
                    ["code"] = code.Substring(0, Math.Min(code.Length, 1000)) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                };

                return await mcpClient.Prompts.GetPromptAsync("suggest-improvements", promptArgs, ct);
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Warning, 0, $"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MCP —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {ex.Message}");
                return new McpPromptResult
                {
                    Description = "–û—à–∏–±–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
                    Messages = new List<McpPromptMessage>()
                };
            }
        }

        private async Task ShowAnalysisResultAsync(EnhancedAnalysisResult result, CancellationToken ct)
        {
            var report = BuildEnhancedReport(result);
            await this.Extensibility.Shell().ShowPromptAsync(report, PromptOptions.OK, ct);
        }

        private string BuildEnhancedReport(EnhancedAnalysisResult result)
        {
            var report = new StringBuilder();

            report.AppendLine("üîç –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–î–ê –° MCP");
            report.AppendLine($"üìÑ –§–∞–π–ª: {result.FileName}");
            report.AppendLine(new string('‚ïê', 60));
            report.AppendLine();

            // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            if (result.BasicAnalysis != null)
            {
                report.AppendLine("üìä –ë–ê–ó–û–í–´–ô –ê–ù–ê–õ–ò–ó:");
                report.AppendLine($"   ‚Ä¢ –Ø–∑—ã–∫: {result.BasicAnalysis.Language}");
                report.AppendLine($"   ‚Ä¢ –°—Ç—Ä–æ–∫: {result.BasicAnalysis.LineCount}");
                report.AppendLine($"   ‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {result.BasicAnalysis.CharacterCount}");
                report.AppendLine($"   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result.BasicAnalysis.ComplexityScore:F1}/10");
                
                if (result.BasicAnalysis.Classes.Any())
                    report.AppendLine($"   ‚Ä¢ –ö–ª–∞—Å—Å–æ–≤: {result.BasicAnalysis.Classes.Count()}");
                if (result.BasicAnalysis.Methods.Any())
                    report.AppendLine($"   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤: {result.BasicAnalysis.Methods.Count()}");
                if (result.BasicAnalysis.Issues.Any())
                    report.AppendLine($"   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º: {result.BasicAnalysis.Issues.Count()}");
                
                report.AppendLine();
            }

            // MCP –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if (result.McpContext?.IsAvailable == true)
            {
                report.AppendLine("üåê MCP –ö–û–ù–¢–ï–ö–°–¢:");
                report.AppendLine($"   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {result.McpContext.AvailableResources?.Count ?? 0}");
                report.AppendLine($"   ‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {result.McpContext.RelevantFiles?.Count ?? 0}");
                
                if (!string.IsNullOrEmpty(result.McpContext.ProjectInfo))
                {
                    report.AppendLine("   ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ: ‚úÖ");
                }
                report.AppendLine();

                // –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                if (result.ContextualAnalysis != null)
                {
                    report.AppendLine("üéØ –ö–û–ù–¢–ï–ö–°–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó MCP:");
                    report.AppendLine("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞");
                    report.AppendLine("   ‚Ä¢ –£—á—Ç–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤");
                    report.AppendLine();
                }

                // MCP —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if (result.McpRecommendations?.Messages?.Any() == true)
                {
                    report.AppendLine("üí° MCP –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
                    foreach (var message in result.McpRecommendations.Messages.Take(3))
                    {
                        if (message.Content?.Text != null)
                        {
                            var text = message.Content.Text.Length > 100 
                                ? message.Content.Text.Substring(0, 97) + "..."
                                : message.Content.Text;
                            report.AppendLine($"   ‚Ä¢ {text}");
                        }
                    }
                    report.AppendLine();
                }
            }
            else
            {
                report.AppendLine("‚ö†Ô∏è MCP –ù–ï–î–û–°–¢–£–ü–ï–ù:");
                report.AppendLine("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑");
                report.AppendLine("   ‚Ä¢ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ");
                report.AppendLine();
            }

            // –û—à–∏–±–∫–∏
            if (!string.IsNullOrEmpty(result.Error))
            {
                report.AppendLine("‚ùå –û–®–ò–ë–ö–ò:");
                report.AppendLine($"   ‚Ä¢ {result.Error}");
                report.AppendLine();
            }

            report.AppendLine("üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MCP –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π");
            return report.ToString();
        }

        private async Task ShowErrorAsync(string message, CancellationToken ct)
        {
            await this.Extensibility.Shell().ShowPromptAsync($"‚ùå {message}", PromptOptions.OK, ct);
        }

        private string GetLanguageFromFileName(string fileName)
        {
            var extension = System.IO.Path.GetExtension(fileName).ToLowerInvariant();
            return extension switch
            {
                ".cs" => "csharp",
                ".vb" => "vb",
                ".js" => "javascript",
                ".ts" => "typescript",
                ".py" => "python",
                ".java" => "java",
                ".cpp" or ".cc" or ".cxx" => "cpp",
                ".c" => "c",
                _ => "text"
            };
        }
    }

    #region Support Classes

    public class EnhancedAnalysisResult
    {
        public string FileName { get; set; } = string.Empty;
        public CodeAnalysisResult? BasicAnalysis { get; set; }
        public McpAnalysisContext? McpContext { get; set; }
        public object? ContextualAnalysis { get; set; }
        public McpPromptResult? McpRecommendations { get; set; }
        public string? Error { get; set; }
    }

    public class McpAnalysisContext
    {
        public bool IsAvailable { get; set; }
        public List<McpResource> AvailableResources { get; set; } = new();
        public List<McpResource> RelevantFiles { get; set; } = new();
        public string? ProjectInfo { get; set; }
        public string? Error { get; set; }
    }

    #endregion
}