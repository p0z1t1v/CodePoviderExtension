using Microsoft.VisualStudio.Extensibility;
using Microsoft.VisualStudio.Extensibility.Commands;
using Microsoft.VisualStudio.Extensibility.Shell;
using System.Diagnostics;
using System.IO;

namespace CodeProviderExtension
{
    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞.
    /// </summary>
    [VisualStudioContribution]
    internal class DemoCodeLensCommand : Command
    {
        private readonly SimpleCodeLensAnalyzer analyzer;
        private readonly TraceSource logger;

        /// <summary>
        /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã.
        /// </summary>
        public override CommandConfiguration CommandConfiguration => new("%CodeProviderExtension.DemoCodeLens.DisplayName%")
        {
            TooltipText = "%CodeProviderExtension.DemoCodeLens.TooltipText%",
            Icon = null,
            Placements = [CommandPlacement.KnownPlacements.ToolsMenu],
        };

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã.
        /// </summary>
        public DemoCodeLensCommand(VisualStudioExtensibility extensibility, SimpleCodeLensAnalyzer analyzer) : base(extensibility)
        {
            this.analyzer = analyzer;
            this.logger = new TraceSource("DemoCodeLensCommand");
        }

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ CodeLens.
        /// </summary>
        public override async Task ExecuteCommandAsync(IClientContext context, CancellationToken cancellationToken)
        {
            try
            {
                logger.TraceInformation("–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ CodeLens –∞–Ω–∞–ª–∏–∑–∞");                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                var activeDocument = await this.Extensibility.Editor().GetActiveTextViewAsync(context, cancellationToken);
                
                if (activeDocument == null)
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º.",
                        PromptOptions.OK,
                        cancellationToken);
                    return;
                }                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
                string? sourceCode = null;
                string filePath;
                
                try
                {
                    sourceCode = activeDocument.Document.Text.ToString();
                    filePath = activeDocument.Document.Uri?.LocalPath ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª";
                    
                    if (string.IsNullOrEmpty(sourceCode))
                    {
                        await this.Extensibility.Shell().ShowPromptAsync(
                            "–î–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.",
                            PromptOptions.OK,
                            cancellationToken);
                        return;
                    }
                }
                catch (Exception ex)
                {
                    logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}");
                    
                    await this.Extensibility.Shell().ShowPromptAsync(
                        $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ex.Message}",
                        PromptOptions.OK,
                        cancellationToken);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                if (!IsSupportedFile(filePath))
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        $"–§–∞–π–ª '{Path.GetFileName(filePath)}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .cs, .vb, .cpp, .c, .h",
                        PromptOptions.OK,
                        cancellationToken);
                    return;
                }

                logger.TraceInformation($"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {filePath}");

                // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                var codeLensInfos = analyzer.AnalyzeCode(sourceCode, filePath);
                
                if (!codeLensInfos.Any())
                {
                    await this.Extensibility.Shell().ShowPromptAsync(
                        $"–í —Ñ–∞–π–ª–µ '{Path.GetFileName(filePath)}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                        PromptOptions.OK,
                        cancellationToken);
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
                var report = GenerateDetailedReport(codeLensInfos, filePath);
                
                // –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ Debug –∫–æ–Ω—Å–æ–ª—å
                Debug.WriteLine("=".PadRight(80, '='));
                Debug.WriteLine("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CODELENS –ê–ù–ê–õ–ò–ó–ê");
                Debug.WriteLine("=".PadRight(80, '='));
                foreach (var line in report)
                {
                    Debug.WriteLine(line);
                }
                Debug.WriteLine("=".PadRight(80, '='));

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                var summary = GenerateSummary(codeLensInfos, filePath);
                
                await this.Extensibility.Shell().ShowPromptAsync(
                    summary,
                    PromptOptions.OK,
                    cancellationToken);

                logger.TraceInformation($"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {codeLensInfos.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
            }
            catch (Exception ex)
            {
                logger.TraceEvent(TraceEventType.Error, 0, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ CodeLens: {ex.Message}");
                
                await this.Extensibility.Shell().ShowPromptAsync(
                    $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {ex.Message}",
                    PromptOptions.OK,
                    cancellationToken);
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        /// </summary>
        private bool IsSupportedFile(string filePath)
        {
            var extension = Path.GetExtension(filePath).ToLowerInvariant();
            return extension == ".cs" || extension == ".vb" || extension == ".cpp" || extension == ".c" || extension == ".h";
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É.
        /// </summary>
        private List<string> GenerateDetailedReport(List<SimpleCodeLensInfo> codeLensInfos, string filePath)
        {
            var report = new List<string>
            {
                $"üìÑ –§–∞–π–ª: {Path.GetFileName(filePath)}",
                $"üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {codeLensInfos.Count}",
                $"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {DateTime.Now:HH:mm:ss}",
                ""
            };

            var groupedByType = codeLensInfos.GroupBy(info => info.Type);

            foreach (var group in groupedByType)
            {
                report.Add($"üî∏ {GetTypeDisplayName(group.Key)} ({group.Count()}):");
                
                foreach (var info in group.OrderBy(i => i.Line))
                {
                    report.Add($"   üìç –°—Ç—Ä–æ–∫–∞ {info.Line + 1}: {info.ElementName}");
                    
                    if (info.Type == CodeLensType.Method)
                    {
                        report.Add($"      ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {info.CyclomaticComplexity}");
                        report.Add($"      ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {info.LinesOfCode}");
                        report.Add($"      ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {info.ParameterCount}");
                        
                        if (info.Suggestions.Any())
                        {
                            report.Add($"      ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {string.Join(", ", info.Suggestions)}");
                        }
                    }
                    else if (info.Type == CodeLensType.Class)
                    {
                        report.Add($"      ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤: {info.MethodCount}");
                        report.Add($"      ‚Ä¢ –°–≤–æ–π—Å—Ç–≤: {info.PropertyCount}");
                        report.Add($"      ‚Ä¢ –ü–æ–ª–µ–π: {info.FieldCount}");
                    }
                    
                    report.Add("");
                }
            }

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            var methods = codeLensInfos.Where(i => i.Type == CodeLensType.Method).ToList();
            var classes = codeLensInfos.Where(i => i.Type == CodeLensType.Class).ToList();

            if (methods.Any())
            {
                var avgComplexity = methods.Average(m => m.CyclomaticComplexity);
                var avgLines = methods.Average(m => m.LinesOfCode);
                var maxComplexity = methods.Max(m => m.CyclomaticComplexity);
                var complexMethods = methods.Count(m => m.CyclomaticComplexity > 10);

                report.Add("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–¢–û–î–ê–ú:");
                report.Add($"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {avgComplexity:F1}");
                report.Add($"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {avgLines:F1} —Å—Ç—Ä–æ–∫");
                report.Add($"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {maxComplexity}");
                report.Add($"   ‚Ä¢ –°–ª–æ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (>10): {complexMethods}");
                report.Add("");
            }

            if (classes.Any())
            {
                var totalMethods = classes.Sum(c => c.MethodCount);
                var totalProperties = classes.Sum(c => c.PropertyCount);
                var avgMethodsPerClass = classes.Average(c => c.MethodCount);

                report.Add("üèóÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–õ–ê–°–°–ê–ú:");
                report.Add($"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤: {totalMethods}");
                report.Add($"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–π—Å—Ç–≤: {totalProperties}");
                report.Add($"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å: {avgMethodsPerClass:F1}");
                report.Add("");
            }

            return report;
        }

        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        /// </summary>
        private string GenerateSummary(List<SimpleCodeLensInfo> codeLensInfos, string filePath)
        {
            var methods = codeLensInfos.Where(i => i.Type == CodeLensType.Method).ToList();
            var classes = codeLensInfos.Where(i => i.Type == CodeLensType.Class).ToList();
            var warnings = codeLensInfos.SelectMany(i => i.Suggestions).Count();

            var summary = new List<string>
            {
                $"üéØ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {Path.GetFileName(filePath)}",
                "",
                $"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:",
                $"   ‚Ä¢ –ö–ª–∞—Å—Å–æ–≤: {classes.Count}",
                $"   ‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤: {methods.Count}",
                $"   ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}",
                ""
            };

            if (methods.Any())
            {
                var avgComplexity = methods.Average(m => m.CyclomaticComplexity);
                var complexMethods = methods.Count(m => m.CyclomaticComplexity > 10);
                
                summary.Add($"‚öôÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞:");
                summary.Add($"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {avgComplexity:F1}");
                
                if (complexMethods > 0)
                {
                    summary.Add($"   ‚ö†Ô∏è –°–ª–æ–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {complexMethods}");
                }
                else
                {
                    summary.Add($"   ‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ");
                }
                
                summary.Add("");
            }

            summary.Add("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –≤ Debug –∫–æ–Ω—Å–æ–ª—å Visual Studio.");
            summary.Add("");
            summary.Add("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CodeLens –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!");

            return string.Join(Environment.NewLine, summary);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞.
        /// </summary>
        private string GetTypeDisplayName(CodeLensType type)
        {
            return type switch
            {
                CodeLensType.Method => "–ú–µ—Ç–æ–¥—ã",
                CodeLensType.Class => "–ö–ª–∞—Å—Å—ã",
                CodeLensType.Property => "–°–≤–æ–π—Å—Ç–≤–∞",
                CodeLensType.Field => "–ü–æ–ª—è",
                CodeLensType.Interface => "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã",
                _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            };
        }
    }
}
